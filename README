Note: You need to start the authorization server first,
because the resource server contacts it during startup to obtain the public key used to verify JWT signatures.

step1:
Open a browser to http://localhost:8080/client/.
The client uses a RestTemplate to access a protected resource (running on http://localhost:8082/api/)
and discovers it is not authorized. It then redirects automatically to the /oauth/authorize endpoint to start an authorization code flow.
In the process it authenticates itself as a 'confidential' client.

step2:
The authorization server redirects to its login page. You can use one of the following username/password combinations to login:
user:password (has USER role)
admin:password (has ADMIN and USER role)
After a successful login you are redirected to the /oauth/confirm_access endpoint
where you need to approve all the grants requested by the client.

step3:
The authorization server now redirects back to the client application
on a pre-approved URI, with an authorization code.

step4:
The client then accesses the authorization server on the /oauth/token
endpoint to exchange the authorization code with an access token (including a refresh token).
This token is actually a JSON Web Token (JWT). If you want to see what's in it,
visit jwt.io and paste it in the Encoded section. You can find the token in the JSON outputted by the client as details.tokenValue.

step5:
The client now retries the request to the resource server.
The resource server accepts the JWT token and checks the signature using the authorization server's public key.
There's no communication necessary between the resource server and the authorization server; that is one of the nice things about JWT.
The JWT token also describes the user's roles, which are checked against the authorization requirements of the resource.

step6:
The client receives the resource (a JSON representation of the user principal)
and dumps it to the browser (where you can also see the JSON Web Token).




Roles

   OAuth defines four roles:
   不同于CAS只有resource owner/resource server/authorization server 3个角色，OAuth多了client角色
   例如酷我音乐通过QQ登陆系统，则酷我就是client角色,QQ就是resource server与authorization server

   resource owner
      An entity capable of granting access to a protected resource.
      When the resource owner is a person, it is referred to as an
      end-user.

   resource server
      The server hosting the protected resources, capable of accepting
      and responding to protected resource requests using access tokens.

   client
      An application making protected resource requests on behalf of the
      resource owner and with its authorization.  The term "client" does
      not imply any particular implementation characteristics (e.g.,
      whether the application executes on a server, a desktop, or other
      devices).

   authorization server
      The server issuing access tokens to the client after successfully
      authenticating the resource owner and obtaining authorization.

   The interaction between the authorization server and resource server
   is beyond the scope of this specification.  The authorization server
   may be the same server as the resource server or a separate entity.
   A single authorization server may issue access tokens accepted by
   multiple resource servers.